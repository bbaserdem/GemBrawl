[gd_scene load_steps=2 format=3]

[sub_resource type="GDScript" id="1"]
script/source = "extends Node2D

## Generates placeholder hex tiles for testing
## Run this scene to create hex tile textures

func _ready() -> void:
	generate_hex_tiles()
	print(\"Hex tiles generated in user://hex_tiles/\")

func generate_hex_tiles() -> void:
	var tile_size = Vector2i(64, 56)  # Standard hex tile size
	var colors = {
		\"floor\": Color(0.4, 0.4, 0.4),
		\"lava\": Color(1.0, 0.3, 0.0),
		\"spikes\": Color(0.7, 0.7, 0.8)
	}
	
	# Create directory
	DirAccess.make_dir_absolute(\"user://hex_tiles\")
	
	for tile_name in colors:
		var image = Image.create(tile_size.x, tile_size.y, false, Image.FORMAT_RGBA8)
		draw_hexagon(image, colors[tile_name])
		image.save_png(\"user://hex_tiles/\" + tile_name + \".png\")

func draw_hexagon(image: Image, color: Color) -> void:
	var center = Vector2(image.get_width() / 2.0, image.get_height() / 2.0)
	var radius = min(image.get_width(), image.get_height()) / 2.0 - 2
	
	# Fill with transparent
	image.fill(Color(0, 0, 0, 0))
	
	# Draw hexagon
	for y in range(image.get_height()):
		for x in range(image.get_width()):
			var pos = Vector2(x, y)
			if is_point_in_hex(pos - center, radius):
				# Add simple shading
				var dist = pos.distance_to(center) / radius
				var shaded_color = color.lerp(color * 0.7, dist)
				image.set_pixel(x, y, shaded_color)

func is_point_in_hex(point: Vector2, radius: float) -> bool:
	var abs_x = abs(point.x)
	var abs_y = abs(point.y)
	
	# Flat-top hexagon bounds check
	return abs_x <= radius * 0.866 and abs_y <= radius * 0.5 + abs_x * 0.577
"

[node name="HexTileGenerator" type="Node2D"]
script = SubResource("1") 